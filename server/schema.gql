# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  _count: AccountCount
  acc_id: String!
  acc_type: AccType!
  email: String!
}

type AccountCount {
  reports: Int!
}

input AccountCreateInput {
  acc_id: String
  acc_type: AccType!
  email: String!
  password: String!
  reports: ReportCreateNestedManyWithoutReporterInput
}

input AccountCreateNestedOneWithoutReportsInput {
  connect: AccountWhereUniqueInput
  connectOrCreate: AccountCreateOrConnectWithoutReportsInput
  create: AccountCreateWithoutReportsInput
}

input AccountCreateOrConnectWithoutReportsInput {
  create: AccountCreateWithoutReportsInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateWithoutReportsInput {
  acc_id: String
  acc_type: AccType!
  email: String!
  password: String!
}

input AccountOrderByWithRelationInput {
  acc_id: SortOrder
  acc_type: SortOrder
  email: SortOrder
  password: SortOrder
  reports: ReportOrderByRelationAggregateInput
}

input AccountRelationFilter {
  is: AccountWhereInput
  isNot: AccountWhereInput
}

enum AccountScalarFieldEnum {
  acc_id
  acc_type
  email
  password
}

input AccountUpdateInput {
input AccountUpdateInput {
  acc_id: StringFieldUpdateOperationsInput
  acc_type: EnumAccTypeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  reports: ReportUpdateManyWithoutReporterNestedInput
  reports: ReportUpdateManyWithoutReporterNestedInput
}

input AccountWhereInput {
  acc_id: StringFilter
  acc_type: EnumAccTypeFilter
  AND: [AccountWhereInput!]
  email: StringFilter
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  password: StringFilter
  reports: ReportListRelationFilter
}

input AccountWhereUniqueInput {
  acc_id: String
  email: String
}

enum AccType {
  ADMIN
  NORMAL
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type CityProject {
  contract_ammount: Float!
  contractor_name: String!
  date_ended: DateTime!
  date_started: DateTime!
  project_ammount: Float!
  project_id: String!
  project_name: String!
  report: Report!
  reports_id: String!
  source_fund: String!
}

input CityProjectCreateNestedOneWithoutReportInput {
  connect: CityProjectWhereUniqueInput
  connectOrCreate: CityProjectCreateOrConnectWithoutReportInput
  create: CityProjectCreateWithoutReportInput
}

input CityProjectCreateOrConnectWithoutReportInput {
  create: CityProjectCreateWithoutReportInput!
  where: CityProjectWhereUniqueInput!
}

input CityProjectCreateWithoutReportInput {
  contract_ammount: Float!
  contractor_name: String!
  date_ended: DateTime!
  date_started: DateTime!
  project_ammount: Float!
  project_id: String
  project_name: String!
  source_fund: String!
}

input CityProjectOrderByWithRelationInput {
  contract_ammount: SortOrder
  contractor_name: SortOrder
  date_ended: SortOrder
  date_started: SortOrder
  project_ammount: SortOrder
  project_id: SortOrder
  project_name: SortOrder
  report: ReportOrderByWithRelationInput
  reports_id: SortOrder
  source_fund: SortOrder
}

input CityProjectRelationFilter {
  is: CityProjectWhereInput
  isNot: CityProjectWhereInput
}

enum CityProjectScalarFieldEnum {
  contract_ammount
  contractor_name
  date_ended
  date_started
  project_ammount
  project_id
  project_name
  reports_id
  source_fund
}

input CityProjectUpdateOneWithoutReportNestedInput {
  connect: CityProjectWhereUniqueInput
  connectOrCreate: CityProjectCreateOrConnectWithoutReportInput
  create: CityProjectCreateWithoutReportInput
  delete: Boolean
  disconnect: Boolean
  update: CityProjectUpdateWithoutReportInput
  upsert: CityProjectUpsertWithoutReportInput
}

input CityProjectUpdateWithoutReportInput {
  contract_ammount: FloatFieldUpdateOperationsInput
  contractor_name: StringFieldUpdateOperationsInput
  date_ended: DateTimeFieldUpdateOperationsInput
  date_started: DateTimeFieldUpdateOperationsInput
  project_ammount: FloatFieldUpdateOperationsInput
  project_id: StringFieldUpdateOperationsInput
  project_name: StringFieldUpdateOperationsInput
  source_fund: StringFieldUpdateOperationsInput
}

input CityProjectUpsertWithoutReportInput {
  create: CityProjectCreateWithoutReportInput!
  update: CityProjectUpdateWithoutReportInput!
}

input CityProjectWhereInput {
  AND: [CityProjectWhereInput!]
  contract_ammount: FloatFilter
  contractor_name: StringFilter
  date_ended: DateTimeFilter
  date_started: DateTimeFilter
  NOT: [CityProjectWhereInput!]
  OR: [CityProjectWhereInput!]
  project_ammount: FloatFilter
  project_id: StringFilter
  project_name: StringFilter
  report: ReportRelationFilter
  reports_id: StringFilter
  source_fund: StringFilter
}

input CityProjectWhereUniqueInput {
  project_id: String
  reports_id: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input EnumAccTypeFieldUpdateOperationsInput {
  set: AccType
}

input EnumAccTypeFilter {
  equals: AccType
  in: [AccType!]
  not: NestedEnumAccTypeFilter
  notIn: [AccType!]
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

type Incident {
  date_ended: DateTime!
  date_started: DateTime!
  incident_id: String!
  report: Report!
  reports_id: String!
}

input IncidentCreateNestedOneWithoutReportInput {
  connect: IncidentWhereUniqueInput
  connectOrCreate: IncidentCreateOrConnectWithoutReportInput
  create: IncidentCreateWithoutReportInput
}

input IncidentCreateOrConnectWithoutReportInput {
  create: IncidentCreateWithoutReportInput!
  where: IncidentWhereUniqueInput!
}

input IncidentCreateWithoutReportInput {
  date_ended: DateTime!
  date_started: DateTime!
  incident_id: String
  incident_type: String!
  incident_type: String!
}

input IncidentOrderByWithRelationInput {
  date_ended: SortOrder
  date_started: SortOrder
  incident_id: SortOrder
  incident_type: SortOrder
  incident_type: SortOrder
  report: ReportOrderByWithRelationInput
  reports_id: SortOrder
}

input IncidentRelationFilter {
  is: IncidentWhereInput
  isNot: IncidentWhereInput
}

enum IncidentScalarFieldEnum {
  date_ended
  date_started
  incident_id
  incident_type
  incident_type
  reports_id
}

input IncidentUpdateOneWithoutReportNestedInput {
  connect: IncidentWhereUniqueInput
  connectOrCreate: IncidentCreateOrConnectWithoutReportInput
  create: IncidentCreateWithoutReportInput
  delete: Boolean
  disconnect: Boolean
  update: IncidentUpdateWithoutReportInput
  upsert: IncidentUpsertWithoutReportInput
}

input IncidentUpdateWithoutReportInput {
  date_ended: DateTimeFieldUpdateOperationsInput
  date_started: DateTimeFieldUpdateOperationsInput
  incident_id: StringFieldUpdateOperationsInput
  incident_type: StringFieldUpdateOperationsInput
  incident_type: StringFieldUpdateOperationsInput
}

input IncidentUpsertWithoutReportInput {
  create: IncidentCreateWithoutReportInput!
  update: IncidentUpdateWithoutReportInput!
}

input IncidentWhereInput {
  AND: [IncidentWhereInput!]
  date_ended: DateTimeFilter
  date_started: DateTimeFilter
  incident_id: StringFilter
  incident_type: StringFilter
  incident_type: StringFilter
  NOT: [IncidentWhereInput!]
  OR: [IncidentWhereInput!]
  report: ReportRelationFilter
  reports_id: StringFilter
}

input IncidentWhereUniqueInput {
  incident_id: String
  reports_id: String
}

type LoginResponseSuccess {
  accessToken: String!
  account: Account!
}

type Mutation {
  createOneAccount(data: AccountCreateInput!): Account!
  createOneReport(data: ReportCreateInput!): Report!
  createOneReport(data: ReportCreateInput!): Report!
  login(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): LoginResponseSuccess
  logout: Boolean!
  registerOneAccount(data: AccountCreateInput!): Account!
  updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
  updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedEnumAccTypeFilter {
  equals: AccType
  in: [AccType!]
  not: NestedEnumAccTypeFilter
  notIn: [AccType!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Query {
  aggregateReport(cursor: ReportWhereUniqueInput, orderBy: [ReportOrderByWithRelationInput!], skip: Int, take: Int, where: ReportWhereInput): AggregateReport!
  cityProject(where: CityProjectWhereUniqueInput!): CityProject
  cityProjects(cursor: CityProjectWhereUniqueInput, distinct: [CityProjectScalarFieldEnum!], orderBy: [CityProjectOrderByWithRelationInput!], skip: Int, take: Int, where: CityProjectWhereInput): [CityProject!]!
  incidents(cursor: IncidentWhereUniqueInput, distinct: [IncidentScalarFieldEnum!], orderBy: [IncidentOrderByWithRelationInput!], skip: Int, take: Int, where: IncidentWhereInput): [Incident!]!
  reports(cursor: ReportWhereUniqueInput, distinct: [ReportScalarFieldEnum!], orderBy: [ReportOrderByWithRelationInput!], skip: Int, take: Int, where: ReportWhereInput): [Report!]!
}

enum QueryMode {
  default
  insensitive
}

type Report {
  city_porject: CityProject
  createdAt: DateTime!
  description: String!
  incident: Incident
  location: JSON!
  report_id: String!
  report_type: ReportType!
  reporter: Account
  reporter_id: String
  updatedAt: DateTime!
}

input ReportCreateInput {
  city_porject: CityProjectCreateNestedOneWithoutReportInput
  createdAt: DateTime
  description: String!
  incident: IncidentCreateNestedOneWithoutReportInput
  location: String!
  published: Boolean!
  report_id: String
  reporter: AccountCreateNestedOneWithoutReportsInput
  updatedAt: DateTime
input ReportCreateInput {
  city_porject: CityProjectCreateNestedOneWithoutReportInput
  createdAt: DateTime
  description: String!
  incident: IncidentCreateNestedOneWithoutReportInput
  location: String!
  published: Boolean!
  report_id: String
  reporter: AccountCreateNestedOneWithoutReportsInput
  updatedAt: DateTime
}

input ReportCreateManyReporterInput {
  createdAt: DateTime
  description: String!
  location: String!
  published: Boolean!
  location: String!
  published: Boolean!
  report_id: String
  updatedAt: DateTime
}

input ReportCreateManyReporterInputEnvelope {
  data: [ReportCreateManyReporterInput!]!
  skipDuplicates: Boolean
}

input ReportCreateNestedManyWithoutReporterInput {
  connect: [ReportWhereUniqueInput!]
  connectOrCreate: [ReportCreateOrConnectWithoutReporterInput!]
  create: [ReportCreateWithoutReporterInput!]
  createMany: ReportCreateManyReporterInputEnvelope
}

input ReportCreateOrConnectWithoutReporterInput {
  create: ReportCreateWithoutReporterInput!
  where: ReportWhereUniqueInput!
}

input ReportCreateWithoutReporterInput {
  city_porject: CityProjectCreateNestedOneWithoutReportInput
  createdAt: DateTime
  description: String!
  incident: IncidentCreateNestedOneWithoutReportInput
  location: String!
  published: Boolean!
  location: String!
  published: Boolean!
  report_id: String
  updatedAt: DateTime
}

input ReportListRelationFilter {
  every: ReportWhereInput
  none: ReportWhereInput
  some: ReportWhereInput
}

input ReportOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReportOrderByWithRelationInput {
  city_porject: CityProjectOrderByWithRelationInput
  createdAt: SortOrder
  description: SortOrder
  incident: IncidentOrderByWithRelationInput
  location: SortOrder
  published: SortOrder
  published: SortOrder
  report_id: SortOrder
  reporter: AccountOrderByWithRelationInput
  reporter_id: SortOrder
  updatedAt: SortOrder
}

input ReportRelationFilter {
  is: ReportWhereInput
  isNot: ReportWhereInput
}

enum ReportScalarFieldEnum {
  createdAt
  description
  location
  published
  published
  report_id
  reporter_id
  updatedAt
}

input ReportScalarWhereInput {
  AND: [ReportScalarWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  location: StringFilter
  location: StringFilter
  NOT: [ReportScalarWhereInput!]
  OR: [ReportScalarWhereInput!]
  published: BoolFilter
  published: BoolFilter
  report_id: StringFilter
  reporter_id: StringNullableFilter
  updatedAt: DateTimeFilter
}

input ReportUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  report_id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReportUpdateManyWithoutReporterNestedInput {
  connect: [ReportWhereUniqueInput!]
  connectOrCreate: [ReportCreateOrConnectWithoutReporterInput!]
  create: [ReportCreateWithoutReporterInput!]
  createMany: ReportCreateManyReporterInputEnvelope
  delete: [ReportWhereUniqueInput!]
  deleteMany: [ReportScalarWhereInput!]
  disconnect: [ReportWhereUniqueInput!]
  set: [ReportWhereUniqueInput!]
  update: [ReportUpdateWithWhereUniqueWithoutReporterInput!]
  updateMany: [ReportUpdateManyWithWhereWithoutReporterInput!]
  upsert: [ReportUpsertWithWhereUniqueWithoutReporterInput!]
}

input ReportUpdateManyWithWhereWithoutReporterInput {
  data: ReportUpdateManyMutationInput!
  where: ReportScalarWhereInput!
}

input ReportUpdateWithoutReporterInput {
  city_porject: CityProjectUpdateOneWithoutReportNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  incident: IncidentUpdateOneWithoutReportNestedInput
  location: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  location: StringFieldUpdateOperationsInput
  published: BoolFieldUpdateOperationsInput
  report_id: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReportUpdateWithWhereUniqueWithoutReporterInput {
  data: ReportUpdateWithoutReporterInput!
  where: ReportWhereUniqueInput!
}

input ReportUpsertWithWhereUniqueWithoutReporterInput {
  create: ReportCreateWithoutReporterInput!
  update: ReportUpdateWithoutReporterInput!
  where: ReportWhereUniqueInput!
}

input ReportWhereInput {
  AND: [ReportWhereInput!]
  city_porject: CityProjectRelationFilter
  createdAt: DateTimeFilter
  description: StringFilter
  incident: IncidentRelationFilter
  location: StringFilter
  location: StringFilter
  NOT: [ReportWhereInput!]
  OR: [ReportWhereInput!]
  published: BoolFilter
  published: BoolFilter
  report_id: StringFilter
  reporter: AccountRelationFilter
  reporter_id: StringNullableFilter
  updatedAt: DateTimeFilter
}

input ReportWhereUniqueInput {
  report_id: String
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}
